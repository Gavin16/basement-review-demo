从一个流构造另一个流
　　java的流类提供了结构化方法，如，底层流和高层过滤流。
　　而高层流不是从输入设备读取，而是从其他流读取。同样高层输出流也不是写入输出设备，而是写入其他流。
　　使用"分层对象(layered objects)"，为单个对象动态地，透明地添加功能的做法，被称为Decorator Pattern。
    Decorator模式要求所有包覆在原始对象之外的对象，都必须具有与之完全相同的接口。
    这使得decorator的用法变得非常的透明--无论对象是否被decorate过，传给它的消息总是相同的。
    这也是Java I/O类库要有"filter(过滤器)"类的原因：抽象的"filter"类是所有decorator的基类。
    Decorator模式常用于如下的情形：如果用继承来解决各种需求的话，类的数量会多到不切实际的地步。
    Java的I/O类库需要提供很多功能的组合，于是decorator模式就有了用武之地。